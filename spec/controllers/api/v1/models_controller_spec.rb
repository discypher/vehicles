require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::ModelsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Model. As you add validations to Model, be sure to
  # adjust the attributes here as well.
  let!(:make) { create :make }
  let!(:model) { create :model }
  let!(:valid_attributes) {
    {
      make: make,
      base_cost: 10_000.00,
      name: 'Cool Ride',
      year: 2015
    }
  }

  let(:invalid_attributes) {
    {
      make: nil,
      base_cost: nil,
      name: nil,
      year: -1
    }
  }

  let(:valid_post_data) {
    {
      "data"=>{
        "type"=>"models",
        "attributes"=>{
          "name"=>"Model S",
          "base-cost"=>96000,
          "year"=>2015
        },
        "relationships"=>{
          "make"=>{
            "data"=>{"type"=>"makes", "id"=>make.id}
          }
        }
      }
    }
  }

  let(:invalid_post_data) {
    {
      "data"=>{
        "type"=>"models",
        "attributes"=>{
          "name"=> nil,
          "base-cost"=>96000,
          "year"=>2015
        },
        "relationships"=>{
          "make"=>{
            "data"=>{"type"=>"makes", "id"=>make.id}
          }
        }
      }
    }
  }

  let(:valid_patch_data) {
    {
      "id"=> model.id,
      "data"=>{
        "id"=> model.id,
        "type"=>"models",
        "attributes"=>{
          "name"=> "Roadster",
          "base-cost"=>96000,
          "year"=>2015
        },
        "relationships"=>{
          "make"=>{
            "data"=>{"type"=>"makes", "id"=>make.id}
          }
        }
      }
    }
  }

  let(:invalid_patch_data) {
    {
      "id"=> model.id,
      "data"=>{
        "id"=>model.id,
        "type"=>"models",
        "attributes"=>{
          "name"=> nil,
          "base-cost"=>96000,
          "year"=>2015
        },
        "relationships"=>{
          "make"=>{
            "data"=>{"type"=>"makes", "id"=>make.id}
          }
        }
      }
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ModelsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let(:valid_headers) { {'Content-Type' => 'application/vnd.api+json'} }

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Model" do
        request.headers.merge! valid_headers
        expect {
          post :create, params: valid_post_data, session: valid_session
        }.to change(Model, :count).by(1)
      end

      it "renders a JSON response with the new model" do
        request.headers.merge! valid_headers
        post :create, params: valid_post_data, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/vnd.api+json')
        expect(response.location).to eq(api_v1_model_url(Model.last))
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the new model" do
        request.headers.merge! valid_headers
        post :create, params: invalid_post_data, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/vnd.api+json')
      end
    end
  end

  describe "GET #index" do
    it "returns a success response" do
      Model.create! valid_attributes
      request.headers.merge! valid_headers
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      request.headers.merge! valid_headers
      model = Model.create! valid_attributes
      get :show, params: {id: model.to_param}, session: valid_session
      expect(response).to be_success
    end
  end


  describe "PUT #update" do
    context "with valid params" do
      it "updates the requested model" do
        request.headers.merge! valid_headers
        patch :update, params: valid_patch_data, session: valid_session
        model.reload
        expect(model.name).to eq "Roadster"
      end

      it "renders a JSON response with the model" do
        request.headers.merge! valid_headers
        patch :update, params: valid_patch_data, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/vnd.api+json')
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the model" do
        request.headers.merge! valid_headers
        patch :update, params: invalid_patch_data, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/vnd.api+json')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested model" do
      request.headers.merge! valid_headers
      model = Model.create! valid_attributes
      expect {
        delete :destroy, params: {id: model.to_param}, session: valid_session
      }.to change(Model, :count).by(-1)
    end
  end

end
